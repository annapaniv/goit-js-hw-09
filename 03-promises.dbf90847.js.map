{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,UAE9BC,MAAEC,EAAKC,KAAEC,EAAIC,OAAEC,GAAWR,EAAKS,SAyBrC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OACS,IAAIC,QADTH,EACiB,CAACI,EAASC,KAC3BD,EAAQ,qBAAqBN,QAAeC,IAAQ,EAGnC,CAACK,EAASC,KAC3BA,EAAO,oBAAoBP,QAAeC,IAAQ,E,CAjCxDZ,EAAKmB,iBAAiB,UAEtB,SAAkBC,GAEhB,IAAIC,EAAaC,OAAOlB,EAAMmB,OAC1BC,EAAWF,OAAOhB,EAAKiB,OACvBE,EAAQH,OAAOlB,EAAMmB,OAGzB,IAAK,IAAIG,EAAI,EAAGA,GAAKJ,OAAOd,EAAOe,OAAQG,GAAK,EAC9CC,YAAW,KAEKjB,EAAcgB,EAAID,GACxBG,MAAML,IAAYzB,EAAA+B,OAAOC,QAAQP,EAAM,IAC5CQ,OAAOC,IAAYlC,EAAA+B,OAAOI,QAAQD,EAAM,IAC3CP,GAASD,CAAQ,GAEhBH,GACHA,GAAcG,EAEhBJ,EAAIc,gB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nconst { delay, step, amount } = form.elements;\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n\n  let firstDelay = Number(delay.value);\n  let stepTime = Number(step.value);\n  let count = Number(delay.value);\n\n\n  for (let i = 1; i <= Number(amount.value); i += 1) {\n    setTimeout(() => {\n\n      let promise = createPromise(i, (count));\n      promise.then((value) => { Notify.success(value)})\n        .catch((error) => { Notify.failure(error) });\n      count += stepTime;\n\n    }, firstDelay);\n    firstDelay += stepTime;\n  };\n  evt.preventDefault();\n\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  if (shouldResolve) {\n    return new Promise((resolve, reject) => {\n      resolve(`Fulfilled promise ${position} in ${delay}`)\n    })\n  } else {\n    return new Promise((resolve, reject) => {\n      reject(`Rejected promise ${position} in ${delay}`)\n    })\n  }\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","delay","$47d4ff9957288465$var$delay","step","$47d4ff9957288465$var$step","amount","$47d4ff9957288465$var$amount","elements","$47d4ff9957288465$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","evt","firstDelay","Number","value","stepTime","count","i","setTimeout","then","Notify","success","catch","error","failure","preventDefault"],"version":3,"file":"03-promises.dbf90847.js.map"}